#!/usr/bin/env bash

set -e

# Set up some parameters for building!
KERNEL_BIT_SIZE=64
OUT_IMAGE_NAME="boot.img"
OUT_2710_NAME="2710_bootfiles.bin"
HAS_CUSTOM_KERNEL=0

# Overwrite the defaults with that from the build.parameters file
: "${CONFIGURATION_ROOT:=/var/lib/pi-gen-micro/configurations/}"

: "${APT_DPKG_CFG:=/var/lib/pi-gen-micro/cfg}"

: "${PREBUILTS_DIR:=/var/lib/pi-gen-micro/prebuilts}"

CONFIGURATION_FOLDER="${CONFIGURATION_ROOT}"$1

export OUT_DIR=$PWD/out_image
source "${CONFIGURATION_FOLDER}"/build.parameters
source "${CONFIGURATION_FOLDER}"/components.parameters

echo "${CONFIGURATION_FOLDER}"
echo "${TARGET_DEVICE}"

rm -rf build
rm -f initramfs
rm -rf "${OUT_DIR}"
rm -rf raspi-firmware
mkdir -p "${OUT_DIR}"

mkdir -p build/usr/bin
mkdir -p build/usr/lib
cd build
ln -s usr/bin bin
ln -s usr/lib lib
cd ..
export ROOTFS_DIR=$PWD/build
export DPKG_ROOT=$ROOTFS_DIR
export TOP="${PWD}"

# TODO: Parse from apt.cfg
mkdir -p apt/cache apt/log apt/state

rsync \
  --archive \
  "$APT_DPKG_CFG" \
  ./

# Relies on GNU sed extension (/dev/stdin file for 'r' command)
sed '/^#/d;s/^/    "--/;s/$/";/' "$CONFIGURATION_FOLDER"/dpkg_extra_args 2>/dev/null | \
sed "
s%PWD%${PWD}%
s%REALROOTREL%$(realpath -s --relative-to="$PWD" /)/%
/DPKG_EXTRA_ARGS/{r /dev/stdin
d}" cfg/apt.cfg > apt.cfg

export APT_CONFIG=$PWD/apt.cfg
DPKG_EXTRA_ARGS="$(sed '/^#/d;s/^/--/' "${CONFIGURATION_FOLDER}"/dpkg_extra_args | xargs)"

apt_download() {
  apt-get install --download-only "$@" 2>/dev/null
}

# Can't use install until it's possible to chroot
apt_install() {
  apt-get install "$@" --no-install-recommends 2>/dev/null
}

get_package_path() {
  # Not fully URL-encoded (no spec found)
  PKG_VERSION=$(apt-cache policy "$1" | grep -oP 'Candidate: \K.*' | sed 's/:/%3a/')
  find apt/cache/archives/ -name "${1}_${PKG_VERSION}*"
}

dpkg_unpack() {
  apt_download "$1"
  set -o noglob
  # shellcheck disable=SC2086
  dpkg ${DPKG_EXTRA_ARGS} --no-triggers --unpack "$(get_package_path $1)"
  set +o noglob
}

dpkg_install() {
  apt_download "$1"
  set -o noglob
  # shellcheck disable=SC2086
  dpkg ${DPKG_EXTRA_ARGS} --install "$(get_package_path $1)"
  set +o noglob
}

apt-get update
mkdir -p build/var/lib/dpkg
touch build/var/lib/dpkg/lock-frontend

# Function to download, patch, and install udeb substitute packages
install_udeb_substitute() {
  local udeb_package="$1"
  local base_package="${udeb_package%-udeb}"

  apt_download "$udeb_package"
  PACKAGE_PATH="$(get_package_path "$udeb_package")"
  EXTRACT_DIR="$(mktemp --directory --tmpdir deb-extract.XXX)"
  dpkg-deb --raw-extract "${PACKAGE_PATH}" "${EXTRACT_DIR}"
  rm "${PACKAGE_PATH}"

  PACKAGE_VERSION="$(grep -oP '^Version:\s*\K.*' "${EXTRACT_DIR}"/DEBIAN/control)"

  # Check if Provides: line exists
  if ! grep -q "^Provides:" "${EXTRACT_DIR}/DEBIAN/control"; then
    # If not, add it before the first line
    sed -i "1iProvides: ${base_package} (= ${PACKAGE_VERSION}), ${base_package}:arm64" "${EXTRACT_DIR}/DEBIAN/control"
  else
    # If it exists, modify it
    sed --in-place "/^Provides:/s/${base_package},/${base_package} (= ${PACKAGE_VERSION}), ${base_package}:arm64,/" "${EXTRACT_DIR}/DEBIAN/control"
  fi

  echo "Replaces: ${base_package} (= ${PACKAGE_VERSION})
Conflicts: ${base_package} (= ${PACKAGE_VERSION})" >> "${EXTRACT_DIR}/DEBIAN/control"

  dpkg-deb --build "${EXTRACT_DIR}" "${PACKAGE_PATH}"
  rm -rf "${EXTRACT_DIR}"

  set -o noglob
  # shellcheck disable=SC2086
  dpkg ${DPKG_EXTRA_ARGS} --install "${PACKAGE_PATH}"
  set +o noglob
}

# Download, patch, install udeb substitute packages
install_udeb_substitute libc6-udeb
if [ -f "${CONFIGURATION_FOLDER}/udebs.list" ]; then
    IFS=', ' read -r -a array <<< "$(< "${CONFIGURATION_FOLDER}"/udebs.list tr '\n' ', ')"

    for package in "${array[@]}"
    do
      echo "Installing Udeb Substitute: ${package}"
      install_udeb_substitute "${package}"
    done
fi

dpkg_install busybox

cd build/bin
ln -s busybox sh
ln -s busybox base64
ln -s mawk awk
echo '#!/bin/sh' > update-alternatives
echo 'return 0' >> update-alternatives
chmod +x update-alternatives
cp update-alternatives dpkg-trigger
cp update-alternatives dpkg-maintscript-helper
cp update-alternatives dpkg-divert
cp update-alternatives deb-systemd-helper
cp update-alternatives dpkg
cd - >/dev/null

# awk is Pre-Depends of base-files (unfortunately)
dpkg_install mawk

# Just unpack base-files for now (can't postinst without base-passwd)
dpkg_unpack base-files

chroot build /bin/busybox --install -s

# Need to properly install base-passwd before base-files can be completed
apt_download libpcre2-8-0 libselinux1 libdebconfclient0 base-passwd
dpkg_install libpcre2-8-0
dpkg_install libselinux1
dpkg_install libdebconfclient0
dpkg_install base-passwd

dpkg_install base-files

# 'mount' will be installed by systemd below, ensure util-linux dep can be met
dpkg_unpack util-linux-extra
rm -rf build/etc/init.d
apt-get --fix-broken install

# Tiny debconf for libpam0g (systemd dep)
apt_install cdebconf-udeb cdebconf-text-udeb
sed --in-place 's/newt/text/g' build/etc/cdebconf.conf
if [ "${SSH}" = 1 ]
then
  echo "Installing SSH!"
  apt_install dropbear-bin
  apt_install dropbear-ssh-service
fi

# TODO: postinst failure, fstrim settings using deb-systemd-helper
apt_install util-linux

# Install systemd
apt_install systemd-sysv

# Symlink to regular /sbin/init (systemd-sysv provides /sbin/init)
ln -s /sbin/init build/init

if [ "${UDEV}" = 1 ]
then
  echo "Installing UDEV!"
  # libc-bin required for passwd postinst
  apt_install libc-bin

  # Setup passwd (udev dep)
  apt_install passwd

  # Install perl-base, addgroup dep (used by udev postinst)
  apt_install perl-base

  # Setup udev
  dpkg_unpack udev
  rm -rf build/etc/init.d
  apt-get --fix-broken install
fi

IFS=', ' read -r -a array <<< "$(< "${CONFIGURATION_FOLDER}"/packages.list tr '\n' ', ')"

for package in "${array[@]}"
do
   echo "Installing ${package}"
   apt_install "${package}"
done


if [ "${NETWORK}" = 1 ]
then
  if [ "${UDEV}" = 1 ]
  then
    echo "Installing & Enabling networking"
    apt_install systemd-timesyncd
    cp "${PREBUILTS_DIR}"/20-wired.network build/etc/systemd/network/20-wired.network
    mkdir -p build/var/lib/systemd/timesync/
    ln -s /lib/systemd/system/systemd-timesyncd.service build/etc/systemd/system/dbus-org.freedesktop.timesync1.service
    ln -s /lib/systemd/system/systemd-timesyncd.service build/etc/systemd/system/sysinit.target.wants/systemd-timesyncd.service
    cp "${PREBUILTS_DIR}"/timesyncd.conf build/etc/systemd/timesyncd.conf
    sed -i "s/After=systemd-sysusers.service/After=systemd-sysusers.service, network-online.target/" ./build/usr/lib/systemd/system/systemd-timesyncd.service
    sed -i "s/Wants=time-set.target/Wants=network-online.target/" build/usr/lib/systemd/system/systemd-timesyncd.service
    sed -i "s/Before=time-set.target sysinit.target shutdown.target//" build/usr/lib/systemd/system/systemd-timesyncd.service

    mkdir -p build/etc/systemd/system
    ln -s /lib/systemd/system/systemd-networkd.service build/etc/systemd/system/dbus-org.freedesktop.network1.service
    mkdir -p build/etc/systemd/system/multi-user.target.wants
    ln -s /lib/systemd/system/systemd-networkd.service build/etc/systemd/system/multi-user.target.wants/systemd-networkd.service
    ln -s /lib/systemd/system/systemd-resolved.service build/etc/systemd/system/multi-user.target.wants/systemd-resolved.service
    echo "nameserver 8.8.8.8
nameserver 8.8.4.4
" > build/etc/resolv.conf
    mkdir -p build/etc/ssl/certs/ 
    
    # ca-certificates are not installed into the correct directory by default
    # Importing the required certificates from the Host machine
    cp -r /etc/ssl/certs/* build/etc/ssl/certs/
    cp /etc/ca-certificates.conf build/etc/ca-certificates.conf

    mkdir -p build/etc/systemd/system/sockets.target.wants
    ln -s /lib/systemd/system/systemd-networkd.socket build/etc/systemd/system/sockets.target.wants/systemd-networkd.socket
    mkdir -p build/etc/systemd/system/sysinit.target.wants
    ln -s /lib/systemd/system/systemd-network-generator.service build/etc/systemd/system/sysinit.target.wants/systemd-network-generator.service
    mkdir -p build/etc/systemd/system/network-online.target.wants
    ln -s /lib/systemd/system/systemd-networkd-wait-online.service build/etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service

  else
    echo "--------------- ERROR - Network cannot be installed without UDEV Support. This component will not work! --------------------"
  fi
fi

rm build/bin/dpkg-*
rm build/bin/dpkg

PATH="${CONFIGURATION_FOLDER}:${PATH}" "${CONFIGURATION_FOLDER}"/installer_scripts.list

# getty-static.service starts tty2-tty6 if dbus / logind are not available
# Override this behaviour
mkdir -p build/etc/systemd/system/getty-static.service.d
echo "[Service]
ExecStart=
ExecStart=/bin/true
" > build/etc/systemd/system/getty-static.service.d/override.conf

# serial-getty waits for device unit (using udev) by default, disable this if
# udev is not used. Always make a copy of serial-getty@.service in 'etc'.
if [ "${UDEV}" = 1 ]
then
  cp build/usr/lib/systemd/system/serial-getty@.service \
    build/etc/systemd/system/serial-getty@.service
else
  sed '
  /^BindsTo/d
  /^After=/s/dev-%i\.device\s*//' \
    build/usr/lib/systemd/system/serial-getty@.service \
    > build/etc/systemd/system/serial-getty@.service
fi

if [ "${AUTOLOGIN}" = 1 ]
then
  # Ensure getty on tty1 is autologin
  mkdir -p build/etc/systemd/system/getty@tty1.service.d
  # shellcheck disable=SC2028
  echo "[Service]
  ExecStart=
  ExecStart=-/sbin/agetty -o '-p -f -- \\\\u' --noclear --autologin root %I \$TERM
  TTYVTDisallocate=no
  " > build/etc/systemd/system/getty@tty1.service.d/autologin.conf

  sed --in-place '
  s/\(--keep-baud\)/--noclear --autologin root \1/' \
    build/etc/systemd/system/serial-getty@.service
fi

sudo sed -i 's:/bin/bash:/bin/sh:g' build/etc/passwd
# Ensure compressed modules can be loaded (busybox implementation of modprobe
# is insufficient)
dpkg_unpack kmod
rm -rf build/etc/init.d
apt-get --fix-broken install

# Boot firmare
apt_download raspi-firmware
mkdir raspi-firmware
RASPI_FIRMWARE_SUBDIR="./usr/lib/raspi-firmware/"
PATH_COMPONENTS="$(echo $RASPI_FIRMWARE_SUBDIR | grep -o "/" | wc -l)"
dpkg-deb --fsys-tarfile "$(get_package_path raspi-firmware)" | \
	tar \
		--extract \
		--directory="raspi-firmware" \
		--strip-components="$PATH_COMPONENTS" \
		$RASPI_FIRMWARE_SUBDIR

if [ "${HAS_CUSTOM_KERNEL}" = 1 ]
then
  # To use custom kernel, provide the following
  # KERNEL_MODULES_DIR=/path/to/built/kernel/modules
  # HAS_CUSTOM_KERNEL=1
  # CUSTOM_KERNEL_VERSION_STR="" e.g. "6.12.40-v8+"
  # CUSTOM_KERNEL_PATH=/path/to/your/Image.gz
  # Will use default kernel for device trees, but will use custom kernel for modules and kernel.img

  echo "Using custom kernel"
  KERNEL_VERSION_STR="${CUSTOM_KERNEL_VERSION_STR}"
  KPKG_EXTRACT="${KERNEL_MODULES_DIR}"
else
  # Find kernel
  KERNEL_META=linux-image-rpi-v8
  KERNEL_PACKAGE=$(apt-cache depends $KERNEL_META | grep -oP 'Depends: \K.*')
  apt_download "$KERNEL_PACKAGE"
  KERNEL_VERSION_STR=${KERNEL_PACKAGE#linux-image-}
  apt_download "${KERNEL_PACKAGE}"

  KPKG_EXTRACT="$(mktemp --directory --tmpdir kernel_package.XXX)"
  dpkg-deb --raw-extract "$(get_package_path "${KERNEL_PACKAGE}")" "${KPKG_EXTRACT}"
fi

# Copy requested kernel modules (+deps) into image and generate module dependencies
depmod --basedir "${KPKG_EXTRACT}" "${KERNEL_VERSION_STR}"
cd "${KPKG_EXTRACT}"
module_paths=()
get_deps() {
	if [ "$#" -eq 0 ]; then
		return
	fi

	local INFO
        # shellcheck disable=SC2068
	INFO="$(modinfo --basedir . -k "${KERNEL_VERSION_STR}" $@ | grep -oP '^(?:filename|depends):\s+\S+')"

	readarray -t filenames <<<"$(grep -oP '^filename:\s+(?:\(builtin\))?\K.*' <<< "$INFO")"
	module_paths+=("${filenames[@]}")

	readarray -t depends <<<"$(sed -nE '/^depends:/{s/^depends:\s+//;s/,/\n/;p}' <<< "$INFO" | sort | uniq)"
        # shellcheck disable=SC2068
	get_deps ${depends[@]}
}

# shellcheck disable=SC2046
get_deps $(sed '/^#/d' "${CONFIGURATION_FOLDER}"/kernel_modules.list | sort | uniq | xargs)
cd - >/dev/null
printf "
${KPKG_EXTRACT}/./lib/modules/${KERNEL_VERSION_STR}/modules.order
${KPKG_EXTRACT}/./lib/modules/${KERNEL_VERSION_STR}/modules.builtin
${KPKG_EXTRACT}/./lib/modules/${KERNEL_VERSION_STR}/modules.builtin.modinfo
%s
" "${module_paths[@]}" | sort | uniq | \
rsync \
	--perms \
	--times \
	--group \
	--owner \
	--acls \
	--xattrs \
	--keep-dirlinks \
	--files-from=- \
	/ \
	"${ROOTFS_DIR}/"
depmod --basedir "${ROOTFS_DIR}" "${KERNEL_VERSION_STR}"

# Manually form-up the kernel and bootfs
mkdir -p "${OUT_DIR}"/overlays

if [ "${HAS_CUSTOM_KERNEL}" = 1 ]
then
  # Assumes that provided kernel did not provide device trees etc.
  KERNEL_META=linux-image-rpi-v8
  KERNEL_PACKAGE=$(apt-cache depends $KERNEL_META | grep -oP 'Depends: \K.*')
  apt_download "$KERNEL_PACKAGE"
  KERNEL_VERSION_STR=${KERNEL_PACKAGE#linux-image-}
  apt_download "${KERNEL_PACKAGE}"

  KPKG_EXTRACT="$(mktemp --directory --tmpdir kernel_package.XXX)"
  dpkg-deb --raw-extract "$(get_package_path "${KERNEL_PACKAGE}")" "${KPKG_EXTRACT}"

  echo "Copying Custom Kernel"
  cp ${CUSTOM_KERNEL_PATH} ${OUT_DIR}/zImage
else
  mv "${KPKG_EXTRACT}"/boot/vmlinuz-${KERNEL_VERSION_STR} ${OUT_DIR}/zImage
fi

mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/README "${OUT_DIR}"/overlays/
mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/overlay_map.dtb "${OUT_DIR}"/overlays/
mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/dwc2.dtbo "${OUT_DIR}"/overlays/
mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-bt.dtbo "${OUT_DIR}"/overlays/
mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-wifi.dtbo "${OUT_DIR}"/overlays/

mv "${KPKG_EXTRACT}"/boot/* "${OUT_DIR}"/

cp "${PREBUILTS_DIR}"/config.txt "${OUT_DIR}"/config.txt
cp "${PREBUILTS_DIR}"/cmdline.txt "${OUT_DIR}"/cmdline.txt

if [ "$#" -eq 1 ]; then
  echo "No target devices specified, building for all devices"
  mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/*.dtb "${OUT_DIR}"/
  mv "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/*.dtb* "${OUT_DIR}"/overlays/
else
  IFS=',' read -ra target_devices <<< "$2"
  for arg in "${target_devices[@]}";
  do 
    echo "Installing files for ${arg}"
    if [ "${arg}" == "cm5" ]; then
      # cm5 Files
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-cm5-cm4io.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-cm5-cm5io.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-cm5l-cm4io.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-cm5l-cm5io.dtb "${OUT_DIR}"/

      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-bt-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-wifi-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/bcm2712d0.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "500" ]; then
      # 500 Files
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-500.dtb "${OUT_DIR}"/

      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-bt-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-wifi-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/bcm2712d0.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "pi5" ]; then
      # pi5 Files
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712d0-rpi-5-b.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-d-rpi-5-b.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2712-rpi-5-b.dtb "${OUT_DIR}"/

      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-bt-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/disable-wifi-pi5.dtbo "${OUT_DIR}"/overlays/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/bcm2712d0.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "cm4" ]; then
      # cm4 Files
      cp raspi-firmware/start4.elf "${OUT_DIR}"/
      cp raspi-firmware/fixup4.dat "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2711-rpi-cm4.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2711-rpi-cm4s.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2711-rpi-cm4-io.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi4.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "400" ]; then
      # 400 Files
      cp raspi-firmware/start4.elf "${OUT_DIR}"/
      cp raspi-firmware/fixup4.dat "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2711-rpi-400.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi4.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "pi4" ]; then
      # pi4 Files
      cp raspi-firmware/start4*.elf "${OUT_DIR}"/
      cp raspi-firmware/fixup4*.dat "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2711-rpi-4-b.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/overlays/vc4-kms-v3d-pi4.dtbo "${OUT_DIR}"/overlays/
    fi
    if [ "${arg}" == "pi3" ]; then
      # pi3 Files
      cp raspi-firmware/* "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2710-rpi-3-b-plus.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2710-rpi-3-b.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2837-rpi-3-a-plus.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2837-rpi-3-b.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2837-rpi-3-b-plus.dtb "${OUT_DIR}"/
    fi
    if [ "${arg}" == "cm3" ]; then
      # cm3 Files
      cp raspi-firmware/* "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2710-rpi-cm3.dtb "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2837-rpi-cm3-io3.dtb "${OUT_DIR}"/
    fi
    
    if [ "${arg}" == "02W" ]; then
      # 02W Files
      cp raspi-firmware/* "${OUT_DIR}"/
      cp "${KPKG_EXTRACT}"/usr/lib/linux-image-"${KERNEL_VERSION_STR}"/broadcom/bcm2837-rpi-zero-2-w.dtb "${OUT_DIR}"/
    fi
  done
fi

# Custom (no udev requirement) systemd-modules-load.service
if [ -z "${UDEV}" ]
then
  cp "${PREBUILTS_DIR}"/load_modules.sh build/usr/local/bin/load_modules
  cp "${PREBUILTS_DIR}"/systemd-modules-load.service build/etc/systemd/system/systemd-modules-load.service
else
  # Installed perl to help udev postinst, however don't need in final image
  rm -rf build/usr/lib/aarch64-linux-gnu/perl-base
  rm -rf build/usr/bin/perl
  rm -rf build/usr/bin/perl5.36.0
fi

if [ "$USES_CUSTOM_LOGO" = 1 ]
then
  ## Copy in our splashscreen files:
  mkdir -p build/lib/firmware
  cp "${CONFIGURATION_FOLDER}"/*.tga build/lib/firmware/
fi

if [ -f "${CONFIGURATION_FOLDER}/cmdline.txt" ]
then
  # Users can specify custom cmdline.txt's in the configuration directory
  # see rpi-imager-embedded for example
  cp "${CONFIGURATION_FOLDER}/cmdline.txt" "${OUT_DIR}"/cmdline.txt
fi

if [ "${SSH}" = 1 ]
then
  echo "Installing SSH!"
  mkdir -p build/root/.ssh
  cat "${PREBUILTS_DIR}"/authorized_keys > build/root/.ssh/authorized_keys
  chmod 0600 build/root/.ssh/authorized_keys
  mkdir build/dev/pts
fi
if [ -f "${CONFIGURATION_FOLDER}"/post_creation.sh ]
then
  # Run post-creation script
  "${CONFIGURATION_FOLDER}"/post_creation.sh
fi

# Package initramfs
cd build

# Delete unecessary packages
if [ -f "${CONFIGURATION_FOLDER}/delete.list" ]; then
    IFS=', ' read -r -a array <<< "$(< "${CONFIGURATION_FOLDER}"/delete.list tr '\n' ', ')"
    for package in "${array[@]}"
    do
      echo "Deleting: ${package}"
      rm -rf $(find . -name *${package}*)
    done
fi

echo "Compressing & creating boot image"

find . -print0 | cpio --null -ov --format=newc > ../initramfs.cpio 2>/dev/null
cd ..
zstd --no-progress --ultra --long --rm -22 initramfs.cpio -o "${OUT_DIR}"/rootfs.cpio.zst

echo "Making boot img"
echo "Out directory = ${OUT_DIR}"
mkdir -p "${OUT_DIR}"
rpi-make-boot-image -d "${OUT_DIR}"/ -o "${OUT_IMAGE_NAME}" -a "${KERNEL_BIT_SIZE}"

echo "Making 2710 bootfiles"
mkdir 2710
mount --bind "${OUT_DIR}" 2710
tar --create --file "${OUT_2710_NAME}" 2710
umount 2710
rmdir 2710
